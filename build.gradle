plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.flywaydb.flyway" version "8.1.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation("io.jsonwebtoken:jjwt-api:0.12.6")
    runtimeOnly("io.jsonwebtoken:jjwt-impl:0.12.6")
    runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.12.6")

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    runtimeOnly 'com.mysql:mysql-connector-j:8.4.0'
    implementation "org.flywaydb:flyway-mysql"

}

// Flyway configuration - only when gradle.properties exists (for local development)
if (project.hasProperty("DB_URL")) {
    flyway {
        url = project.property("DB_URL")
        user = project.property("DB_USER")
        password = project.property("DB_PASSWORD")
        schemas = [project.property("DB_SCHEMA")]
        defaultSchema = project.property("DB_SCHEMA")
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
